import socket
import json
import hashlib
import argparse
import threading
import time
import matplotlib.pyplot as plt

def consistent_hash(key, nodes):
    """Generate a consistent hash for the given key."""
    hash_val = int(hashlib.md5(key.encode()).hexdigest(), 16)
    return nodes[hash_val % len(nodes)]

def send_request(server_info, method, key, value=None):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(server_info)
        request_data = json.dumps({"method": method, "key": key, "value": value})
        s.sendall(request_data.encode('utf-8'))
        response = s.recv(1024)
        # print("Response:", response.decode('utf-8'))  # Commented out to reduce console clutter during testing
    finally:
        s.close()

def test_performance(servers, num_requests=100):
    latency_data = []
    throughput_data = []

    for server_count in range(1, len(servers) + 1):
        latencies_temp = []
        throughputs_temp = []

        for n in range(10, num_requests, 10):
            threads = []

            start_time = time.time()

            for i in range(num_requests):
                key = f"{i * 2} key"
                thread = threading.Thread(
                    target=send_request,
                    args=(consistent_hash(key, servers), "PUT", key, "potato")
                )
                threads.append(thread)
                thread.start()

            for thread in threads:
                thread.join()

            end_time = time.time()
            latency = end_time - start_time
            throughput = n / latency

            latencies_temp.append(latency)
            throughputs_temp.append(throughput)

        latency_data.append(latencies_temp)
        throughput_data.append(throughputs_temp)

    return latency_data, throughput_data

def plot_results(latency_data, throughput_data):
    colors = ["red", "green", "blue", "yellow", "pink", "cyan"]

    plt.figure(figsize=(10, 5))

    for i in range(len(latency_data)):
        plt.plot(throughput_data[i], latency_data[i], color = colors[i], marker="o", label=f"{i+1} Servers")

    plt.xlabel('Throughput (requests/second)')
    plt.ylabel('Average Latency (seconds)')
    plt.title('Latency vs Throughput for KV Stores')
    plt.legend()
    plt.show()

# Define your server nodes
servers = [("localhost", 5000), ("localhost", 5001), ("localhost", 5002)]

parser = argparse.ArgumentParser(description='Send a request to the server.')
parser.add_argument('--all_servers', type=bool, default=False, help='Boolean representing whether to send request to all servers.')
parser.add_argument('method', choices=['GET', 'PUT', 'DELETE', 'END'], help='The method to use.')
parser.add_argument('key', help='The key for the request.')
parser.add_argument('value', nargs='?', default=None, help='The value for the request (only used with PUT).')

# Example usage
if __name__ == "__main__":
    args = parser.parse_args()
    if args.all_servers:
        latency, throughput = test_performance(servers)
        plot_results(latency, throughput)
    else:
        selected_server = consistent_hash(args.key, servers)
        send_request(selected_server, args.method, args.key, args.value)





# import socket
# import json
# import hashlib
# import time
# import matplotlib.pyplot as plt

# # Consistent Hashing Function
# def consistent_hash(key, nodes):
#     hash_val = int(hashlib.md5(key.encode()).hexdigest(), 16)
#     return nodes[hash_val % len(nodes)]

# # Function to Send Request
# def send_request(server_info, method, key, value=None):
#     s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#     s.connect(server_info)
#     request_data = json.dumps({"method": method, "key": key, "value": value})
#     s.sendall(request_data.encode('utf-8'))
#     response = s.recv(1024)
#     s.close()
#     return response.decode('utf-8')

# # Function to Test Throughput and Latency
# def test_performance(servers, num_requests):
#     latencies = []
#     start_time = time.time()

#     for i in range(num_requests):
#         key = f"key_{i}"
#         server = consistent_hash(key, servers)
#         start = time.time()
#         send_request(server, "GET", key)
#         latencies.append(time.time() - start)

#     total_time = time.time() - start_time
#     throughput = num_requests / total_time
#     avg_latency = sum(latencies) / len(latencies)
#     return avg_latency, throughput

# # Servers Configuration
# servers_configurations = [
#     [("localhost", 5000)],
#     [("localhost", 5000), ("localhost", 5001)],
#     [("localhost", 5000), ("localhost", 5001), ("localhost", 5002)]
# ]

# num_requests = 1000
# latencies = []
# throughputs = []

# # Testing for different server configurations
# for servers in servers_configurations:
#     latency, throughput = test_performance(servers, num_requests)
#     latencies.append(latency)
#     throughputs.append(throughput)

# # Plotting
# plt.plot(throughputs, latencies, marker='o')
# plt.xlabel('Throughput (requests/second)')
# plt.ylabel('Average Latency (seconds)')
# plt.title('Latency vs Throughput for different KV Store configurations')
# plt.grid(True)
# plt.show()
